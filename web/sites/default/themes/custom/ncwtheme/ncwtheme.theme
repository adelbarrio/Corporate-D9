<?php

/**
 * @file
 * Functions to support theming in the SASS Starterkit subtheme.
 */

use Drupal\Core\Form\FormStateInterface;

/**
 * Implements hook_form_system_theme_settings_alter() for settings form.
 *
 * Replace Barrio setting options with subtheme ones.
 *
 * Example on how to alter theme settings form
 */
function ncwtheme_form_system_theme_settings_alter(&$form, FormStateInterface $form_state) {
  $form['components']['navbar']['bootstrap_barrio_navbar_top_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
  $form['components']['navbar']['bootstrap_barrio_navbar_background']['#options'] = [
    'bg-primary' => t('Primary'),
    'bg-secondary' => t('Secondary'),
    'bg-light' => t('Light'),
    'bg-dark' => t('Dark'),
    'bg-white' => t('White'),
    'bg-transparent' => t('Transparent'),
  ];
}

/**
 * Add class url-alias in body tag
 */
function ncwtheme_preprocess_html(&$variables){
  $current_path = \Drupal::service('path.current')->getPath();
  $path_alias = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path_alias = ltrim($path_alias, '/');
  $variables['attributes']['class'][] = \Drupal\Component\Utility\Html::cleanCssIdentifier($path_alias);
  $variables['base_path'] = base_path();
  if (\Drupal::service('path.matcher')->isFrontPage()) {
    $variables['head_title']['title'] = t('European Agency for Safety & Health at Work - Information, statistics, legislation and risk assessment tools.');
  }
}

/**
 * Download PDF and Images in Publications detail and Infographics detail
 */
function ncwtheme_preprocess_node(&$variables)
{
  $node = $variables['node'];
  $pdf = [];
  $img = [];
  if ( $node->bundle() == 'publication' or $node->bundle() == 'infographic' ){
    foreach ($node->getTranslationLanguages() as $language) {
      $nodeTranslation = $node->getTranslation($language->getId());
      if ($nodeTranslation->hasField('field_file_media')) {
        $fileMediaField = $nodeTranslation->get('field_file_media');
        if ($fileMediaField->count() > 0) {
          $fileMedia = $fileMediaField->entity;
          if ($fileMedia->hasField('field_media_document')) {
            $fileField = $fileMedia->get('field_media_document');
            if ($fileField->count() > 0) {
              $file = $fileMedia->get('field_media_document')->entity;
              $pdf[$language->getId()] = file_create_url($file->getFileUri());
              if (!isset($variables['fileDownloadType'])) {
                $variables['fileDownloadType'] = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
              }
            }
          }
        }
      }
    }
    ksort($pdf);
    $variables['relatedPdf'] = $pdf;
  }
  if ($node->bundle() == 'infographic' or $node->bundle() == 'publication') {
    foreach ($node->getTranslationLanguages() as $language) {
      $nodeTranslation = $node->getTranslation($language->getId());
      if ($nodeTranslation->hasField('field_image_media')) {
        $fileImageField = $nodeTranslation->get('field_image_media');
        if ($fileImageField->count() > 0) {
          $fileMediaImg = $fileImageField->entity;
          if ($fileMediaImg->hasField('field_media_image')) {
            $fileFieldImg = $fileMediaImg->get('field_media_image');
            if ($fileFieldImg->count() > 0) {
              $fileImg = $fileMediaImg->get('field_media_image')->entity;
              $img[$language->getId()] = file_create_url($fileImg->getFileUri());
            }
          }
        }
      }
    }
    ksort($img);
    $variables['relatedImg'] = $img;
    $variables['coverImg'] = $fileFieldImg;
  }
  /**
   * Get parameter in URL to External Inforgrphic en/tools-and-publications/infographics/how-to-manage-dangerous-substances/how-to-manage-dangerous-substances-infographic
   */
  if ($node->bundle() == 'article' and $node->id() == '14885' ){
    $request = \Drupal::request();
    if ($request->query->has('lan')){
      $variables['lan'] = $request->query->get('lan') ;
    }
  }
}

/**
 * Download PDF and Images in Publications related views : /publications/topic/4526%2B2968
 */
function ncwtheme_preprocess_ds_1col(&$variables)
{
  if(isset($variables['content']['#node'])) {
    $node = $variables['content']['#node'];
    $img = [];
    $pdf = [];
    if ($node->bundle() == 'publication') {
      foreach ($node->getTranslationLanguages() as $language) {
        $nodeTranslation = $node->getTranslation($language->getId());
        if ($nodeTranslation->hasField('field_file_media')) {
          $fileMediaField = $nodeTranslation->get('field_file_media');
          if ($fileMediaField->count() > 0) {
            $fileMedia = $fileMediaField->entity;
            if ($fileMedia->hasField('field_media_document')) {
              $fileField = $fileMedia->get('field_media_document');
              if ($fileField->count() > 0) {
                $file = $fileMedia->get('field_media_document')->entity;
                $pdf[$language->getId()] = file_create_url($file->getFileUri());
                if (!isset($variables['fileDownloadType'])) {
                  $variables['fileDownloadType'] = pathinfo($file->getFileUri(), PATHINFO_EXTENSION);
                }
              }
            }
          }
        }
        if ($nodeTranslation->hasField('field_image_media')) {
          $fileImageField = $nodeTranslation->get('field_image_media');
          if ($fileImageField->count() > 0) {
            $fileMediaImg = $fileImageField->entity;
            if ($fileMediaImg->hasField('field_media_image')) {
              $fileFieldImg = $fileMediaImg->get('field_media_image');
              if ($fileFieldImg->count() > 0) {
                $fileImg = $fileMediaImg->get('field_media_image')->entity;
                $img[$language->getId()] = file_create_url($fileImg->getFileUri());
              }
            }
          }
        }
      }
      $variables['relatedPdf'] = $pdf;
      $variables['relatedImg'] = $img;
      $variables['coverImg'] = $fileFieldImg;
    }
  }
}





