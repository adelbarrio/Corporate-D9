<?php

/**
 * @file
 */

use Drupal\node\NodeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\short_message\Form\ShortMessageForm;

/**
 * Implements hook_theme().
 */
function short_message_theme($existing, $type, $theme, $path) {
  return [
    'short_messages_header' => [
      'variables' => [
        'header_link' => NULL,
        'header_translation_links' => NULL,
        'languages' => NULL,
        'newsletter_title' => NULL,
        'newsletter_id' => NULL,
        'newsletter_date' => NULL,
        'node_id' => NULL,
      ],
    ],
    'short_messages_body' => [
      'variables' => [
        'body_content' => NULL,
        'node_id' => NULL,
        'bundle' => NULL,
        'contacts' => NULL,
      ],
    ],
    'short_messages_footer' => [
      'variables' => [],
    ],
  ];
}

/**
 * Implements hook_entity_type_build().
 */
function short_message_entity_type_build(array &$entity_types) {
  if (isset($entity_types['node'])) {
    $entity_types['node']->setFormClass('short_message', ShortMessageForm::class)
      ->setLinkTemplate('short_message-form', '/node/{node}/short_message');
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function short_message_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  // Search if form is short_message.
  if (preg_match('/.*short_message.*/', $form_id) !== FALSE) {
    // Remove unused part of the form for short_message action.
    if (isset($form['url_redirects'])) {
      unset($form['url_redirects']);
    }
    if (isset($form['menu'])) {
      unset($form['menu']);
    }

    foreach (array_keys($form["#process"], 'meta_position_form_node_form_process', TRUE) as $key) {
      unset($form["#process"][$key]);
    }
  }
}

/**
 * Alter published date.
 *
 * @param \Drupal\node\NodeInterface $node
 *   Node to check published dates.
 *
 * @return string[]
 *   Output after checking dates.
 */
function _short_message_alter_published_date(NodeInterface $node) {
  $output = '';
  $timeFormatService = \Drupal::service('date.formatter');

  if ($node->bundle() == 'press_release') {
    if (!empty($node->hasField('field_pr_embargo_date'))) {
      $embargo_date = strtotime($node->get('field_pr_embargo_date')->getString());
      if ($embargo_date) {
        $str_embargo_date = $timeFormatService->format($embargo_date, 'short_date_eu');
        if ($embargo_date - strtotime('now') > 0) {
          $message = t('HOLD ON FOR PRESS RELEASE UNTIL') . ' ' . $str_embargo_date;
        }
      }
    }
    if (!isset($message)) {
      $publication_date = strtotime($node->get('field_publication_date')->getString());
      $str_publication_date = $timeFormatService->format($publication_date, 'short_date_eu');
      $message = t('FOR IMMEDIATE RELEASE') . ' - ' . $str_publication_date;
    }
    $output = '<span class="press-release-date">' . $message . '</span>';
  }

  return [
    '#type' => 'markup',
    '#markup' => $output,
  ];
}
