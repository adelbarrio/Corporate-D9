<?php

/**
 * @file
 * Translation workflow module hooks.
 */

use Drupal\translation_workflow\Entity\PriorityJobInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\translation_workflow\Entity\MultipleTargetLanguageJob;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\translation_workflow\Entity\MultipleTargetLanguageJobItem;
use Drupal\translation_workflow\Form\MultipleTargetLanguageJobItemForm;
use Drupal\translation_workflow\MultipleTargetLanguageConfigSourcePluginUi;
use Drupal\translation_workflow\MultipleTargetLanguageLocaleSourcePluginUi;
use Drupal\translation_workflow\MutipleTargetLanguageContentEntitySourcePluginUi;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function translation_workflow_form_tmgmt_cart_form_alter(&$form, FormStateInterface $form_state, $form_id) {

  if (isset($form['source_language'])) {
    $form['source_language']['#size'] = 24;
    if (isset($form['source_language']['#options']['nol'])) {
      unset($form['source_language']['#options']['nol']);
    }
  }

  if (isset($form['target_language'])) {
    $form['target_language']['#size'] = 24;
    if (isset($form['target_language']['#options']['nol'])) {
      unset($form['target_language']['#options']['nol']);
    }
  }

  $jobFieldDefinitions = \Drupal::service('entity_field.manager')
    ->getFieldDefinitions('tmgmt_job_multiple_target', 'default');
  if (isset($jobFieldDefinitions['priority'])) {
    $priorityField = $jobFieldDefinitions['priority'];
    $form['priority'] = [
      '#type' => 'select',
      '#options' => $priorityField->getSetting('allowed_values'),
      '#title' => $priorityField->getLabel(),
      '#default_value' => PriorityJobInterface::PRIORITY_NORMAL,
      '#weight' => -1,
    ];
  }

  // Select all languages.
  $form['select_all_lng'] = [
    '#type' => 'checkbox',
    '#title' => t('Select all languages'),
  ];
  $form['empty_cart']['#weight'] = 7;
  $form['remove_selected']['#weight'] = 6;
  $form['request_translation']['#weight'] = 4;

  $form['#attached']['library'][] = 'translation_workflow/select_all';
  $form["request_translation"]["#validate"][] = '_translation_workflow_form_tmgmt_cart_form_validate';
}

/**
 * Validation for cart form.
 *
 * @param array $form
 *   Form variables.
 * @param \Drupal\Core\Form\FormStateInterface $form_state
 *   Form State values.
 */
function _translation_workflow_form_tmgmt_cart_form_validate(array &$form, FormStateInterface $form_state) {
  if ($form_state->hasValue('target_language')) {
    $targetLanguages = $form_state->getValue('target_language');
    if (empty($targetLanguages)) {
      $form_state->setErrorByName('target_language', t("You didn't select any target language."));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function translation_workflow_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();
  if (isset($storage['view'])) {
    $view = $storage['view'];
    switch ($view->id()) {
      case 'translation_workflow_jobs_overview':
        if (isset($form['state'])) {
          $states = ['' => t('- Any -')] + MultipleTargetLanguageJob::getStates();
          $form['state'] = [
            '#type' => 'select',
            '#options' => $states,
            '#default_value' => reset($states),
          ];
        }
        if (isset($form['priority'])) {
          $priorities = ['' => t('- Any -')] + MultipleTargetLanguageJob::getPriorities();
          $form['priority'] = [
            '#type' => 'select',
            '#options' => $priorities,
            '#default_value' => reset($priorities),
          ];
        }
        break;

      case 'tmgmt_job_items':
        if ($view->current_display == 'submitted' && isset($form['translator_state'])) {
          $states = ['' => t('- Any -')] + MultipleTargetLanguageJobItem::getStates();
          $form['translator_state'] = [
            '#type' => 'select',
            '#options' => $states,
            '#default_value' => reset($states),
          ];
        }
        break;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function translation_workflow_tmgmt_job_multiple_target_create(EntityInterface $entity) {
  // If we are creating a job and added a priority value it is setted on entity.
  if ($entity instanceof MultipleTargetLanguageJob) {
    $priority = Drupal::request()->get('priority');
    if ($priority) {
      $entity->set('priority', $priority);
    }
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function translation_workflow_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'tmgmt_job_item') {
    $fields["tjid"]->setSetting('target_type', 'tmgmt_job_multiple_target');
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function translation_workflow_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  if (isset($entity_types['tmgmt_job_item'])) {
    // $entity_types['tmgmt_job_item']->setHandlerClass('access', MultipleTargetLanguageJobItemAccessControlHandler::class);
    // $entity_types['tmgmt_job_item']->setHandlerClass('list_builder', MultipleTargetLanguageJobItemListBuilder::class);
    $entity_types['tmgmt_job_item']->setHandlerClass('form', [
      'edit' => MultipleTargetLanguageJobItemForm::class,
    ]);
  }
}

/**
 * Implements hook_tmgmt_file_format_plugin_info_alter().
 */
function translation_workflow_tmgmt_file_format_plugin_info_alter(&$file_formats) {
}

/**
 * Implements hook_tmgmt_translator_plugin_info_alter().
 */
function translation_workflow_tmgmt_translator_plugin_info_alter(&$info) {
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function translation_workflow_tmgmt_source_plugin_info_alter(&$info) {
  foreach ($info as $pluginName => &$pluginInfo) {
    $uiClass = $pluginInfo['ui'];
    $class = $pluginInfo['class'];
    switch ($pluginName) {
      case 'content':
        $uiClass = MutipleTargetLanguageContentEntitySourcePluginUi::class;
        // $class = MultipleTargetLanguageContentEntitySource::class;
        break;

      case 'locale':
        $uiClass = MultipleTargetLanguageLocaleSourcePluginUi::class;
        break;

      case 'config':
        $uiClass = MultipleTargetLanguageConfigSourcePluginUi::class;
    }
    $info[$pluginName]['ui'] = $uiClass;
    $info[$pluginName]['class'] = $class;
  }
}

/**
 * Implements hook_entity_type_build().
 */
function translation_workflow_entity_type_build(array &$entity_types) {
  if (isset($entity_types['tmgmt_job_item'])) {
    $entity_types['tmgmt_job_item']->setClass(MultipleTargetLanguageJobItem::class);
  }
}
