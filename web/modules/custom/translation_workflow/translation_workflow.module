<?php

/**
 * @file
 * Translation workflow module hooks.
 */

use Drupal\tmgmt\Entity\Translator;
use Drupal\tmgmt\TMGMTException;
use Drupal\Core\Entity\EntityInterface;
use Drupal\translation_workflow\Entity\MultipleTargetLanguageJob;
use Drupal\Core\Entity\EntityTypeInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\translation_workflow\Entity\MultipleTargetLanguageJobItem;
use Drupal\translation_workflow\Entity\ViewsData\MultipleTargetLanguageJobItemViewsData;
use Drupal\translation_workflow\Event\TranslationEvent;
use Drupal\translation_workflow\Form\MultipleTargetLanguageJobItemForm;
use Drupal\translation_workflow\MultipleTargetLanguageConfigSourcePluginUi;
use Drupal\translation_workflow\MultipleTargetLanguageLocaleSourcePluginUi;
use Drupal\translation_workflow\MutipleTargetLanguageContentEntitySourcePluginUi;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function translation_workflow_form_tmgmt_content_translate_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['actions']['request'])) {
    $form['actions']['request']['#submit'] = ['tmgmt_content_translate_form_submit'];
  }
}

/**
 * {@inheritdoc}
 */
function tmgmt_content_translate_form_submit(array &$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $form_state->get('entity');
  $values = $form_state->getValues();
  // Create the job object.
  $translators = Translator::loadMultiple();
  $job = MultipleTargetLanguageJob::create([
    'source_language' => $entity->language(),
    'target_languages' => [$values['languages']],
    'uid' => \Drupal::currentUser()->id(),
    'job_items' => [],
    'translator' => reset($translators),
  ]);

  foreach (array_keys(array_filter($values['languages'])) as $langcode) {
    try {
      // Add the job item.
      $item = $job->addItem('content', $entity->getEntityTypeId(), $entity->id());
      $item->set('target_language', $langcode);
      $item->save();
      // Append this job to the array of created jobs so we can redirect the user
      // to a multistep checkout form if necessary.
    }
    catch (TMGMTException $e) {
      watchdog_exception('tmgmt', $e);
      $languages = \Drupal::languageManager()->getLanguages();
      $target_lang_name = $languages[$langcode]->language;
      \Drupal::messenger()
        ->addError(t('Unable to add job item for target language %name. Make sure the source content is not empty.', ['%name' => $target_lang_name]));
    }
  }
  \Drupal::service('tmgmt.job_checkout_manager')
    ->checkoutAndRedirect($form_state, [$job]);
}

/**
 * Implements hook_entity_update().
 */
function translation_workflow_entity_update(EntityInterface $entity) {
  $contentModerationService = \Drupal::service('content_moderation_notifications.notification_information');
  if ($contentModerationService->isModeratedEntity($entity)) {
    $transition = $contentModerationService->getTransition($entity);
    if ($transition->to()->id()) {
      \Drupal::service('event_dispatcher')
        ->dispatch(new TranslationEvent(NULL, $entity), TranslationEvent::TRANSLATION_CONTENT_READY_TO_PUBLISH);
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function translation_workflow_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_state->has('tmgmt_cart')) {
    $form['#validate'][] = 'translation_workflow_form_alter_validate';
  }
}

/**
 * Validate that items inside a job exists.
 */
function translation_workflow_form_alter_validate(&$form, FormStateInterface $form_state) {
  if ($form_state->has('tmgmt_cart')) {
    $cart_info = $form_state->get('tmgmt_cart');
    if (!empty($cart_info['plugin']) && !empty($cart_info['item_type']) && $form_state->getValue('items')) {
      $source_items = array_filter($form_state->getValue('items'));
      $item_type = $cart_info['item_type'];
      $plugin = $cart_info['plugin'];
    }
    elseif (!empty($cart_info['plugin']) && !empty($cart_info['item_type']) && !empty($cart_info['item_id'])) {
      $source_items = [$cart_info['item_id']];
      $item_type = $cart_info['item_type'];
      $plugin = $cart_info['plugin'];
    }
    else {
      return;
    }
    $existingJobItems = MultipleTargetLanguageJobItem::jobItemExists(['item_id' => $source_items]);
    if (!empty($existingJobItems)) {
      \Drupal::messenger()
        ->addWarning(t('Some of the added elements are already in the cart.'));
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function translation_workflow_form_views_exposed_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $storage = $form_state->getStorage();
  if (isset($storage['view'])) {
    $view = $storage['view'];
    switch ($view->id()) {
      case 'translation_workflow_jobs_overview':
        if (isset($form['state'])) {
          $states = ['' => t('- Any -')] + MultipleTargetLanguageJob::getStates();
          $form['state'] = [
            '#type' => 'select',
            '#options' => $states,
            '#default_value' => reset($states),
          ];
        }
        if (isset($form['priority'])) {
          $priorities = ['' => t('- Any -')] + MultipleTargetLanguageJob::getPriorities();
          $form['priority'] = [
            '#type' => 'select',
            '#options' => $priorities,
            '#default_value' => reset($priorities),
          ];
        }
        break;

      case 'tmgmt_job_items':
        if ($view->current_display == 'submitted' && isset($form['translator_state'])) {
          $states = ['' => t('- Any -')] + MultipleTargetLanguageJobItem::getStates();
          $form['translator_state'] = [
            '#type' => 'select',
            '#options' => $states,
            '#default_value' => reset($states),
          ];
        }
        break;
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_create().
 */
function translation_workflow_tmgmt_job_multiple_target_create(EntityInterface $entity) {
  // If we are creating a job and added a priority value it is setted on entity.
  if ($entity instanceof MultipleTargetLanguageJob) {
    $priority = Drupal::request()->get('priority');
    if ($priority) {
      $entity->set('priority', $priority);
    }
  }
}

/**
 * Implements hook_entity_base_field_info_alter().
 */
function translation_workflow_entity_base_field_info_alter(&$fields, EntityTypeInterface $entity_type) {
  if ($entity_type->id() === 'tmgmt_job_item') {
    $fields["tjid"]->setSetting('target_type', 'tmgmt_job_multiple_target');
  }
}

/**
 * Implements hook_entity_type_alter().
 */
function translation_workflow_entity_type_alter(array &$entity_types) {
  /** @var \Drupal\Core\Entity\EntityTypeInterface[] $entity_types */
  if (isset($entity_types['tmgmt_job_item'])) {
    // $entity_types['tmgmt_job_item']->setHandlerClass('access', MultipleTargetLanguageJobItemAccessControlHandler::class);
    // $entity_types['tmgmt_job_item']->setHandlerClass('list_builder', MultipleTargetLanguageJobItemListBuilder::class);
    $entity_types['tmgmt_job_item']->setHandlerClass('views_data', MultipleTargetLanguageJobItemViewsData::class);
    $entity_types['tmgmt_job_item']->setHandlerClass('form', [
      'edit' => MultipleTargetLanguageJobItemForm::class,
    ]);
  }
}

/**
 * Implements hook_tmgmt_file_format_plugin_info_alter().
 */
function translation_workflow_tmgmt_file_format_plugin_info_alter(&$file_formats) {
}

/**
 * Implements hook_tmgmt_translator_plugin_info_alter().
 */
function translation_workflow_tmgmt_translator_plugin_info_alter(&$info) {
}

/**
 * Implements hook_tmgmt_source_plugin_info_alter().
 */
function translation_workflow_tmgmt_source_plugin_info_alter(&$info) {
  foreach ($info as $pluginName => &$pluginInfo) {
    $uiClass = $pluginInfo['ui'];
    $class = $pluginInfo['class'];
    switch ($pluginName) {
      case 'content':
        $uiClass = MutipleTargetLanguageContentEntitySourcePluginUi::class;
        // $class = MultipleTargetLanguageContentEntitySource::class;
        break;

      case 'locale':
        $uiClass = MultipleTargetLanguageLocaleSourcePluginUi::class;
        break;

      case 'config':
        $uiClass = MultipleTargetLanguageConfigSourcePluginUi::class;
    }
    $info[$pluginName]['ui'] = $uiClass;
    $info[$pluginName]['class'] = $class;
  }
}

/**
 * Implements hook_entity_type_build().
 */
function translation_workflow_entity_type_build(array &$entity_types) {
  if (isset($entity_types['tmgmt_job_item'])) {
    $entity_types['tmgmt_job_item']->setClass(MultipleTargetLanguageJobItem::class);
  }
}
